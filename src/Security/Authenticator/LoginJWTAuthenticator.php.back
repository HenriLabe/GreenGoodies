<?php

namespace App\Security\Authenticator;

use App\Entity\Customer;
use Lexik\Bundle\JWTAuthenticationBundle\Security\Authenticator\JWTAuthenticator;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Token\PostAuthenticationToken;

class LoginJWTAuthenticator extends JWTAuthenticator
{
    public function createToken(Passport $passport, string $firewallName): TokenInterface
    {
        /** @var Customer $user */
        $user = $passport->getUser();
        dd($user);
        if (!$user->isApiEnabled()) {
            throw new AccessDeniedException('Access denied.');
        }
        // Continue l'authentification si le compte est activé
        return parent::createToken($passport, $firewallName);
    }
    public function authenticate(Request $request): Passport
    {
        $passport = parent::authenticate($request);
        // Ajoute un UserBadge pour récupérer l'utilisateur
        $passport->addBadge(new UserBadge($passport->getUser()->getUserIdentifier()));
        return $passport;
    }
}